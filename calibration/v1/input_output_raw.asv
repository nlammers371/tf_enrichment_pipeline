clear
close all
addpath('../utilities')
% define core ID variables
% Script to generate figures establishing presence of enrichment bursts at
% start of transcription bursts
clear 
% close all
addpath('../utilities')
% set ID variables
DropboxFolder = 'S:\Nick\Dropbox\';
project_cell = {'Dl-Ven_snaBAC-mCh_v4'};%,'Dl-Ven_snaBAC-mCh_F-F-F_v1','Dl-Ven_hbP2P-mCh_v2'};
title_cell = {'sna OG (New, 2D)'};%,'sna FFF (2D)', 'hbP2P OG (2D)'};
% project_cell = {'Dl-Ven_snaBAC-mCh_v3','Dl-Ven_snaBAC-mCh_v4'};%,'Dl-Ven_snaBAC-mCh_F-F-F_v1'};
% title_cell = {'OG (old, 2D hmm, 3D sampling)','OG (new, full 3D)'};
fluo_dim_vec = [2,2,2];
protein_dim_vec = [2,2,2];
type_name = 'comparisons_OG_only';
% Params
K = 3;
w = 7;

% load data for each project
master_struct = struct;
for p = 1:numel(project_cell)
    project = project_cell{p};
    fluo_dim = fluo_dim_vec(p);
    protein_dim = protein_dim_vec(p);
    % set write paths
    [~, DataPath, FigureRoot] =   header_function(DropboxFolder, project); 
    
    % final results
    load([DataPath 'hmm_input_output_results_w' num2str(w) '_K' num2str(K) '_f' num2str(fluo_dim) 'D_p' num2str(protein_dim) 'D.mat'])
    master_struct(p).results_struct = results_struct;
    clear results_struct;

    % raw compiled data
    load([DataPath 'nucleus_struct_protein.mat'])
    master_struct(p).nucleus_struct_protein = nucleus_struct_protein;
    clear nucleus_struct;
end

%% make figure directory
FigPath = [FigureRoot '\raw_input_output_comparisons\' type_name '\'];
mkdir(FigPath)
% create analysis filters
analysis_struct = struct;
Tres = 20; % seconds
window_size = 15;
time_axis = (-window_size:window_size)*Tres / 60;

min_pause_len = 5; % minimum length of preceding OFF period (in time steps)
max_pause_len = 1000;
min_burst_len = 2;
max_burst_len = 1000;

for p = 1:numel(project_cell)
    % extract relevant arrays from project 1
    results_struct = master_struct(p).results_struct;
    analysis_struct(p).lag_dur_vec = results_struct.lag_dur_vec;
    analysis_struct(p).lead_dur_vec = results_struct.lead_dur_vec;
    analysis_struct(p).hmm_array_dm = results_struct.hmm_array;
    analysis_struct(p).hmm_array_dm = analysis_struct(p).hmm_array_dm ./ nanstd(analysis_struct(p).hmm_array_dm);
    fluo_array_dm = results_struct.fluo_array  - nanmean(results_struct.fluo_array,2);
    analysis_struct(p).fluo_array_dm = fluo_array_dm / nanstd(fluo_array_dm(:));
    analysis_struct(p).mf_array_dm = results_struct.mf_array - nanmean(results_struct.mf_array,2);     
    analysis_struct(p).time_vec = results_struct.center_time_vec/60;
    analysis_struct(p).spot_array_dm = results_struct.spot_array_dm;
    analysis_struct(p).virtual_array_dm = results_struct.virtual_array_dm;
    analysis_struct(p).feature_sign_vec = results_struct.feature_sign_vec;
    % generate basic filter for target locus and computational controls
    analysis_struct(p).burst_ft = results_struct.feature_sign_vec == 1&results_struct.lead_dur_vec>=min_pause_len&results_struct.lead_dur_vec<=max_pause_len...
        &results_struct.lag_dur_vec>=min_burst_len&results_struct.lag_dur_vec<=max_burst_len;%    
    % record sampling vector
    analysis_struct(p).sample_options = find(analysis_struct(p).burst_ft);
end
% Sample raw data vectors
for p = 1:numel(project_cell)
    nucleus_struct_protein = master_struct(p).nucleus_struct_protein; 
    results_struct = master_struct(p).results_struct; 
    burst_ft = analysis_struct(p).burst_ft;
 
    % get raw protein snips for particles and time points of interest
    nc_pt_id_index = [nucleus_struct_protein.ParticleID];
    burst_rise_pt_ids = results_struct.particle_id_vec(burst_ft);
    burst_rise_times = results_struct.center_time_vec(burst_ft);
    
    % initialize array to store snips 
    spot_pt_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    virt_pt_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    edge_pt_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    fluo_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    
    % other shit
    spot_dx_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    spot_dy_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    spot_dz_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    spot_x_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    spot_y_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    spot_z_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    nc_protein_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
    edge_dist_array = NaN(numel(burst_rise_pt_ids), 2*window_size + 1);
        
    % iterate through events and pull snips
    for i = 1:numel(burst_rise_pt_ids)
        ind = find(nc_pt_id_index==burst_rise_pt_ids(i));
        c_time = burst_rise_times(i);
        time_vec = nucleus_struct_protein(ind).time;
        % find apprixmate center time
        [~, c_ind] = min(abs(time_vec-c_time));
        full_range = c_ind-window_size:c_ind+window_size;
        trunc_range = full_range(full_range>0 & full_range <= numel(time_vec));
        
        % extract basic samples
        if fluo_dim_vec(p) == 3
            spot_pt_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).spot_protein_vec_3d(trunc_range);
            virt_pt_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).serial_null_protein_vec_3d(trunc_range);
            edge_pt_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).edge_null_protein_vec_3d(trunc_range);
            fluo_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).fluo3D(trunc_range);     
        else
            spot_pt_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).spot_protein_vec(trunc_range);
            virt_pt_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).serial_null_protein_vec(trunc_range);
            edge_pt_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).edge_null_protein_vec(trunc_range);
            fluo_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).fluo(trunc_range);     
        end 
        
        % let's get creative I guess
        nc_protein_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).mf_null_protein_vec(trunc_range);
        edge_dist_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).spot_edge_dist_vec(trunc_range);            
        if fluo_dim_vec(p) == 3                        
            spot_dx_array(i,ismember(full_range,trunc_range)) = [0 abs(diff(nucleus_struct_protein(ind).xPosParticle3D(trunc_range)))];
            spot_dy_array(i,ismember(full_range,trunc_range)) = [0 abs(diff(nucleus_struct_protein(ind).yPosParticle3D(trunc_range)))];
            spot_dz_array(i,ismember(full_range,trunc_range)) = [0 abs(diff(nucleus_struct_protein(ind).zPosParticle3D(trunc_range)))];
            spot_x_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).xPosParticle3D(trunc_range);
            spot_y_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).yPosParticle3D(trunc_range);
            spot_z_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).xPosParticle3D(trunc_range);
        else            
            spot_dx_array(i,ismember(full_range,trunc_range)) = [0 abs(diff(nucleus_struct_protein(ind).xPosParticle(trunc_range)))];
            spot_dy_array(i,ismember(full_range,trunc_range)) = [0 abs(diff(nucleus_struct_protein(ind).yPosParticle(trunc_range)))];
            spot_dz_array(i,ismember(full_range,trunc_range)) = [0 abs(diff(nucleus_struct_protein(ind).zPosParticle(trunc_range)))];            
            spot_x_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).xPosParticle(trunc_range);
            spot_y_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).yPosParticle(trunc_range);
            spot_z_array(i,ismember(full_range,trunc_range)) = nucleus_struct_protein(ind).xPosParticle(trunc_range);
        end 
        
        
        
    end
    
    % save arrays
    analysis_struct(p).spot_pt_array = spot_pt_array;
    analysis_struct(p).virt_pt_array = virt_pt_array;
    analysis_struct(p).edge_pt_array = edge_pt_array;
    analysis_struct(p).fluo_array = fluo_array;
    
    analysis_struct(p).spot_x_array = spot_x_array;
    analysis_struct(p).spot_y_array = spot_y_array;
    analysis_struct(p).spot_z_array = spot_z_array;
    
    % save mean trends
    analysis_struct(p).spot_pt_mean = nanmean(spot_pt_array) - nanmean(spot_pt_array(:));
    analysis_struct(p).virt_pt_mean = nanmean(virt_pt_array) - nanmean(virt_pt_array(:));
    analysis_struct(p).edge_pt_mean = nanmean(edge_pt_array) - nanmean(edge_pt_array(:));
    analysis_struct(p).fluo_mean = nanmean(fluo_array);% - nanmean(fluo_array(:));
    
    
    analysis_struct(p).spot_dx_mean_rel = nanmean(spot_dx_array)./ nanmean(spot_dx_array(:));
    analysis_struct(p).spot_dy_mean_rel = nanmean(spot_dy_array)./ nanmean(spot_dy_array(:));
    analysis_struct(p).spot_dz_mean_rel = nanmean(spot_dz_array)./ nanmean(spot_dz_array(:));
    
    analysis_struct(p).spot_dx_mean = nanmean(spot_dx_array);
    analysis_struct(p).spot_dy_mean = nanmean(spot_dy_array);
    analysis_struct(p).spot_dz_mean = nanmean(spot_dz_array);
    
    analysis_struct(p).edge_dist_mean = nanmean(edge_dist_array) - nanmean(edge_dist_array(:));
    analysis_struct(p).nc_pt_mean = nanmean(nc_protein_array) - nanmean(nc_protein_array(:));
    
    drift_filter = 0.1*nanmax(sqrt(spot_dx_array(:,.^2+spot_dy_array.^2),[],2) < 1;
    analysis_struct(p).drift_filter = drift_filter;
    
    analysis_struct(p).spot_pt_mean_ft = nanmean(spot_pt_array(drift_filter,:)) - nanmean(nanmean(spot_pt_array(drift_filter,:)));
end

%% plot basic input/output results
%%
close all
figure;
hold on
plot(time_axis,analysis_struct(p).spot_pt_mean,line_types{p},'Color',cmap(2,:),'LineWidth',2)
plot(time_axis,analysis_struct(p).spot_pt_mean_ft,line_types{p},'Color',cmap(3,:),'LineWidth',2)

%%
cmap = brewermap(9,'Set2');
line_types = {'-','--','-o'};
colors = {cmap(2,:),cmap(2,:),cmap(5,:)};
burst_dt_comp_fig = figure;
hold on 
lgd = [];
for p = 1:numel(project_cell)
    % locus 
    lgd = [lgd plot(time_axis,analysis_struct(p).spot_pt_mean,line_types{p},'Color',cmap(2,:),'LineWidth',2)];
    plot(time_axis,analysis_struct(p).virt_pt_mean,line_types{p},'Color',cmap(3,:),'LineWidth',2);
%     plot(time_axis,analysis_struct(p).edge_pt_mean,line_types{p},'Color',cmap1(4,:),'LineWidth',2);    
end
% labels, formatting, etc
xlabel('offset (minutes)')
ylabel('relative Dl concentration (au)')
legend(lgd,title_cell{:}, 'Location','southwest');
set(gca,'Fontsize',14,'xtick',-4:2:4)
chH = get(gca,'Children');
set(gca,'Children',flipud(chH));
set(gca,    'Box','off',...
            'Color',[228,221,209]/255,...            
            'TickLength',[0.02,0.05])    
burst_dt_comp_fig.Color = 'white';        
burst_dt_comp_fig.InvertHardcopy = 'off';
% save
saveas(burst_dt_comp_fig,[FigPath 'locus_trend_comparisons_w_ctrl.tif'])
saveas(burst_dt_comp_fig,[FigPath 'locus_trend_comparisons_w_ctrl.pdf'])


    


%% plot basic input/output results
cmap = brewermap(9,'Set2');
line_types = {'-','--','-o'};
colors = {cmap(2,:),cmap(2,:),cmap(5,:)};
burst_dt_comp_fig = figure;
hold on 
lgd = [];
for p = 1:numel(project_cell)
    % locus 
    lgd = [lgd plot(time_axis,analysis_struct(p).spot_pt_mean,line_types{p},'Color',colors{p},'LineWidth',2)];
%     plot(time_axis,analysis_struct(p).virt_pt_mean,line_types{p},'Color',cmap1(3,:),'LineWidth',2);
%     plot(time_axis,analysis_struct(p).edge_pt_mean,line_types{p},'Color',cmap1(4,:),'LineWidth',2);    
end
% labels, formatting, etc
xlabel('offset (minutes)')
ylabel('relative Dl concentration (au)')
legend(lgd,title_cell{:}, 'Location','southwest');
set(gca,'Fontsize',14,'xtick',-4:2:4)
chH = get(gca,'Children');
set(gca,'Children',flipud(chH));
set(gca,    'Box','off',...
            'Color',[228,221,209]/255,...            
            'TickLength',[0.02,0.05])    
burst_dt_comp_fig.Color = 'white';        
burst_dt_comp_fig.InvertHardcopy = 'off';
% save
saveas(burst_dt_comp_fig,[FigPath 'locus_trend_comparisons.tif'])
saveas(burst_dt_comp_fig,[FigPath 'locus_trend_comparisons.pdf'])

%% everything else
PixelSize = nucleus_struct_protein(1).PixelSize; 
line_types = {'-','--'};

burst_dt_comp_fig = figure;
hold on 

for p = 1:numel(project_cell)
    % locus 
    lgd = [];
    lgd = [lgd plot(time_axis,PixelSize*analysis_struct(p).spot_dx_mean,line_types{p},'Color',cmap(1,:),'LineWidth',2)];
    lgd = [lgd plot(time_axis,PixelSize*analysis_struct(p).spot_dy_mean,line_types{p},'Color',cmap(6,:),'LineWidth',2)];
    lgd = [lgd plot(time_axis,.5*analysis_struct(p).spot_dz_mean,line_types{p},'Color',cmap(7,:),'LineWidth',2)];
%     plot(time_axis,analysis_struct(p).edge_pt_mean,line_types{p},'Color',cmap1(4,:),'LineWidth',2);    
end
% ylim([-.2 .4])
% labels, formatting, etc
xlabel('offset (minutes)')
ylabel('point-over-point change in position (\mu m)')
legend(lgd,'x','y','z', 'Location','southwest');
set(gca,'Fontsize',14,'xtick',-4:2:4)
chH = get(gca,'Children');
set(gca,'Children',flipud(chH));
set(gca,    'Box','off',...
            'Color',[228,221,209]/255,...            
            'TickLength',[0.02,0.05])    
burst_dt_comp_fig.Color = 'white';        
burst_dt_comp_fig.InvertHardcopy = 'off';
xlim([time_axis(2) time_axis(end)])
% save
saveas(burst_dt_comp_fig,[FigPath 'position_trends_abs.tif'])
saveas(burst_dt_comp_fig,[FigPath 'position_trends_abs.pdf'])
%%
line_types = {'-','--'};

burst_dt_comp_fig = figure;
hold on 

for p = 1:numel(project_cell)
    % locus 
    lgd = [];
    lgd = [lgd plot(time_axis,analysis_struct(p).spot_dx_mean_rel,line_types{p},'Color',cmap(1,:),'LineWidth',2)];
    lgd = [lgd plot(time_axis,analysis_struct(p).spot_dy_mean_rel,line_types{p},'Color',cmap(6,:),'LineWidth',2)];
    lgd = [lgd plot(time_axis,analysis_struct(p).spot_dz_mean_rel,line_types{p},'Color',cmap(7,:),'LineWidth',2)];
%     plot(time_axis,analysis_struct(p).edge_pt_mean,line_types{p},'Color',cmap1(4,:),'LineWidth',2);    
end
% ylim([-.2 .4])
xlim([time_axis(2) time_axis(end)])
% labels, formatting, etc
xlabel('offset (minutes)')
ylabel('point-over-point change in position (relative)')
legend(lgd,'x','y','z', 'Location','southwest');
set(gca,'Fontsize',14,'xtick',-4:2:4)
chH = get(gca,'Children');
set(gca,'Children',flipud(chH));
set(gca,    'Box','off',...
            'Color',[228,221,209]/255,...            
            'TickLength',[0.02,0.05])    
burst_dt_comp_fig.Color = 'white';        
burst_dt_comp_fig.InvertHardcopy = 'off';
% save
saveas(burst_dt_comp_fig,[FigPath 'position_trends_rel.tif'])
saveas(burst_dt_comp_fig,[FigPath 'position_trends_rel.pdf'])


line_types = {'-','--'};

burst_dt_comp_fig = figure;
hold on 

for p = 1:numel(project_cell)
    % locus 
    lgd = [];
    lgd = [lgd plot(time_axis,analysis_struct(p).nc_pt_mean,line_types{p},'Color',cmap(8,:),'LineWidth',2)];
%     plot(time_axis,analysis_struct(p).edge_pt_mean,line_types{p},'Color',cmap1(4,:),'LineWidth',2);    
end
% labels, formatting, etc
xlabel('offset (minutes)')
ylabel('average nuclear Dorsal')
legend(title_cell, 'Location','southwest');
set(gca,'Fontsize',14,'xtick',-4:2:4)
chH = get(gca,'Children');
set(gca,'Children',flipud(chH));
set(gca,    'Box','off',...
            'Color',[228,221,209]/255,...            
            'TickLength',[0.02,0.05])    
burst_dt_comp_fig.Color = 'white';        
burst_dt_comp_fig.InvertHardcopy = 'off';
% save
saveas(burst_dt_comp_fig,[FigPath 'mean_nucleus_trends.tif'])
saveas(burst_dt_comp_fig,[FigPath 'mean_nucleus_trends.pdf'])


line_types = {'-','--'};

burst_dt_comp_fig = figure;
hold on 

for p = 1:numel(project_cell)
    % locus 
    lgd = [];
    lgd = [lgd plot(time_axis,analysis_struct(p).edge_dist_mean,line_types{p},'Color',cmap(9,:),'LineWidth',2)];
%     plot(time_axis,analysis_struct(p).edge_pt_mean,line_types{p},'Color',cmap1(4,:),'LineWidth',2);    
end
% labels, formatting, etc
xlabel('offset (minutes)')
ylabel('distance from nuclear boundary')
legend(title_cell, 'Location','southwest');
set(gca,'Fontsize',14,'xtick',-4:2:4)
chH = get(gca,'Children');
set(gca,'Children',flipud(chH));
set(gca,    'Box','off',...
            'Color',[228,221,209]/255,...            
            'TickLength',[0.02,0.05])    
burst_dt_comp_fig.Color = 'white';        
burst_dt_comp_fig.InvertHardcopy = 'off';
% save
saveas(burst_dt_comp_fig,[FigPath 'nc_boundary_trends.tif'])
saveas(burst_dt_comp_fig,[FigPath 'nc_boundary_trends.pdf'])


% spot fluorescence
burst_dt_comp_fig = figure;
hold on 

for p = 1:numel(project_cell)
    % locus 
    lgd = [];
    lgd = [lgd plot(time_axis,analysis_struct(p).fluo_mean,line_types{p},'Color','black','LineWidth',2)];
%     plot(time_axis,analysis_struct(p).edge_pt_mean,line_types{p},'Color',cmap1(4,:),'LineWidth',2);    
end
% labels, formatting, etc
xlabel('offset (minutes)')
ylabel('distance from nuclear boundary')
legend(title_cell, 'Location','southwest');
set(gca,'Fontsize',14,'xtick',-4:2:4)
chH = get(gca,'Children');
set(gca,'Children',flipud(chH));
set(gca,    'Box','off',...
            'Color',[228,221,209]/255,...            
            'TickLength',[0.02,0.05])    
burst_dt_comp_fig.Color = 'white';        
burst_dt_comp_fig.InvertHardcopy = 'off';
% save
saveas(burst_dt_comp_fig,[FigPath 'fluo_trends.tif'])
saveas(burst_dt_comp_fig,[FigPath 'fluo_trends.pdf'])

