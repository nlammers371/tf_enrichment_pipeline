% main03_check_control_selection(project)
%
% DESCRIPTION
% Generates figures overlaying segmentation results onto histone channel
% and interface in which user can accept or reject spot assignments
%
% ARGUMENTS
% project: master ID variable
%
% OPTIONS
% dropboxFolder: Path to data folder where you wish to save
%                pipeline-generated data sets and figures. If this
%                var is not specified, output will be saved one level
%                above git repo in the folder structure
%
% INTERFACE
%
% Movement:
%
% n: move back one sample
% m: move forward one sample
% j: jump to specified sample (entered in command line)
%
% Labels:
%
% 1: approve frame
% 0: disapprove frame
%
% x: Exit
%
% General instructions: For now this script is primarily intended as a
% means to spot-check the segementation and sample selection for different
% data sets and time points. If systematic issues are uncovered, we will
% need to adapt a different component of the pipleine either to resolve
% issue or to remove problematic observations

function main03_check_control_selection_beta(project,varargin)
close all
% specify paths
dataPath = ['../dat/' project '/'];

for i = 1:numel(varargin)    
    if strcmpi(varargin{i}, 'dropboxFolder')        
        dataPath = [varargin{i+1} '/ProcessedEnrichmentData/' project '/'];
        figPath = [varargin{i+1} '/LocalEnrichmentFigures/' project '/control_selection/'];
    end
end

snipPath = [dataPath 'qc_images1/'];
mkdir(figPath);

% load data
load([dataPath '/nucleus_struct_protein.mat']);
snip_files = dir([snipPath '*.mat']);


% iterate through snip files
exit_flag = 0;
cm = jet(128);

% index = find(snip_files==outstanding_frames(1));
index = 100;
while ~exit_flag
    % create sister_struct(i) struct    
    name = snip_files(index).name; 
    % load snip data
    load([snipPath name]);
    
    %%%%%%%%%%%%%%%%%%%%%%% load image stack %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     
    cc = '';
    while ~strcmp(cc,'0')&&~strcmp(cc,'1')      
        edge_dist_snip = qc_spot.edge_dist_snip;
        edge_dist_rescaled = 1 + ceil(edge_dist_snip/max(edge_dist_snip(:)) * 63);
        cm = [[1 1 1] ; cm(2:end,:)];
        edge_dist_rgb = ind2rgb(edge_dist_rescaled,cm);
        
        rand_dist_snip = qc_spot.rand_dist_snip;
        rand_dist_snip(edge_dist_rescaled==1) = 0;
        rand_dist_rescaled = 1 + ceil(rand_dist_snip/max(rand_dist_snip(:)) * 63);               
        rand_dist_rgb = ind2rgb(rand_dist_rescaled,cm);
        % get frame center
        x_center = qc_spot.x_center;
        y_center = qc_spot.y_center;
        yDim = ceil(size(edge_dist_snip,1)/2);
        xDim = ceil(size(edge_dist_snip,2)/2);
        
        qc_fig = figure('Position',[0 0 512 512]);                 
%         subplot(1,2,1)
        imshow(imadjust(mat2gray(qc_spot.mcp_snip)),'InitialMagnification','fit');                        
        hold on
        p = imshow(edge_dist_rgb);        
        p.AlphaData = .4;      
        s = [];
        s = [s scatter(qc_spot.xp-x_center+xDim,qc_spot.yp-y_center+yDim,30,'MarkerFaceColor',cm(30,:),'MarkerEdgeAlpha',0)];
        s = [s scatter(qc_spot.xc_edge-x_center+xDim,qc_spot.yc_edge-y_center+yDim,30,'MarkerFaceColor',cm(60,:),'MarkerEdgeAlpha',0)];
        s = [s scatter(qc_spot.xc_rand-x_center+xDim,qc_spot.yc_rand-y_center+yDim,30,'MarkerFaceColor',cm(90,:),'MarkerEdgeAlpha',0)];
        s = [s scatter(qc_spot.xc_serial-x_center+xDim,qc_spot.yc_serial-y_center+yDim,30,'MarkerFaceColor',cm(120,:),'MarkerEdgeAlpha',0)];
        legend([s1 s2 s3 s4], 'spot', 'edge control', 'random', 'serialized')          
        title('Edge Distance Sample')
        
        
        set(gcf,'Name',['Particle ' num2str(qc_spot.ParticleID) ' Frame ' num2str(qc_spot.frame) ' (' num2str(index) ' of ' num2str(numel(snip_files)) ')'])
%         if qc_review_vec(snip_files(index)) == 1
%             set(gcf, 'color', 'green')
%         elseif qc_review_vec(snip_files(index)) == 0
%             set(gcf, 'color', 'red')
%         end
        ct=waitforbuttonpress;
        cc=get(qc_fig,'currentcharacter');
        if strcmp(cc,'1')||strcmp(cc,'0')                       
%             nucleus_struct(qc_spot.nc_index).qc_review_vec(qc_spot.nc_sub_index) = eval(cc);
            index = min(numel(snip_files),index + 1);
        elseif strcmp(cc,'x')
            exit_flag = 1;
            break        
        elseif strcmp(cc,'n')
            index = max(1,index-1);
            break
        elseif strcmp(cc,'m')
            index = min(numel(snip_files),index+1);
            break
        elseif strcmp(cc,'j')
            index = input('enter desired index: ');
            break
        elseif strcmp(cc,'s')
            disp('saving figure')
            im_fig = figure;
            imshow(imadjust(mat2gray(qc_spot.mcp_snip)),'InitialMagnification','fit');
            saveas(im_fig,[figPath 'image1_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.png'])
            saveas(im_fig,[figPath 'image1_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.pdf'])
            
            spot_fig = figure;
            imshow(imadjust(mat2gray(qc_spot.mcp_snip)),'InitialMagnification','fit');
            hold on
            s1 = scatter(qc_spot.xp-x_center+xDim,qc_spot.yp-y_center+yDim,30,'MarkerFaceColor',cm(30,:),'MarkerEdgeAlpha',0);
            saveas(spot_fig,[figPath 'image2_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.png'])
            saveas(spot_fig,[figPath 'image2_image_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.pdf'])
            
            color_fig = figure;
            imshow(imadjust(mat2gray(qc_spot.mcp_snip)),'InitialMagnification','fit');
            hold on
            p = imshow(edge_dist_rgb);        
            p.AlphaData = .4; 
            s1 = scatter(qc_spot.xp-x_center+xDim,qc_spot.yp-y_center+yDim,30,'MarkerFaceColor',cm(30,:),'MarkerEdgeAlpha',0);
%             colorbar
            saveas(color_fig,[figPath 'image3_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.png'])
            saveas(color_fig,[figPath 'image3_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.pdf'])
            
            full_fig = figure;
            imshow(imadjust(mat2gray(qc_spot.mcp_snip)),'InitialMagnification','fit');
            hold on
            p = imshow(edge_dist_rgb);        
            p.AlphaData = .4; 
            s1 = scatter(qc_spot.xp-x_center+xDim,qc_spot.yp-y_center+yDim,30,'MarkerFaceColor',cm(30,:),'MarkerEdgeAlpha',0);
            s2 = scatter(qc_spot.xc_edge-x_center+xDim,qc_spot.yc_edge-y_center+yDim,30,'MarkerFaceColor',cm(60,:),'MarkerEdgeAlpha',0);
%             colorbar
            saveas(full_fig,[figPath 'image4_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.png'])
            saveas(full_fig,[figPath 'image4_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.pdf'])

            cb_fig = figure;      
            p = imshow(edge_dist_rgb);      
            hold on
            p.AlphaData = .4; 
            colorbar
%             s1 = scatter(qc_spot.xp-x_center+xDim,qc_spot.yp-y_center+yDim,30,'MarkerFaceColor',cm(30,:),'MarkerEdgeAlpha',0);
%             s2 = scatter(qc_spot.xc_rand-x_center+xDim,qc_spot.yc_rand-y_center+yDim,30,'MarkerFaceColor',cm(60,:),'MarkerEdgeAlpha',0);
            saveas(cb_fig,[figPath 'image0_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.png'])
            saveas(cb_fig,[figPath 'image0_pt' num2str(1e4*ParticleID) '_frame' sprintf('%03d',frame) '.pdf'])
                        
        end       
    end 
%     close all
    if exit_flag
        disp('Exiting')
        break
    end
end
% nucleus_struct_protein.qc_review_vec = qc_review_vec;
save([dataPath 'nucleus_struct_protein.mat'],'nucleus_struct_protein')