% Function wrapper for stochastic trace simulations in non-steady-state
% conditions

function simInfo = io_sim_function(simType,systemParams,KD,HC,K_out,K_in,varargin)

close all
addpath(genpath('../../utilities'));

% %%%%%%%%%%%%%%%%%%%%%% Specify initial settings %%%%%%%%%%%%%%%%%%%%%%%

% initialize data structure to store simulation info
simInfo = struct;
simInfo.simType = simType;%'out_only_off';

% define basic sim parameters
simInfo.seq_length = 120;
simInfo.memory = 7;
simInfo.deltaT = 20;
simInfo.t_MS2 = 1.4;
simInfo.n_traces = 100;
simInfo.granularity = 1;

% define response parameters
simInfo.KD = KD;
simInfo.HC = HC;

% specify network architecture
simInfo.systemParams = systemParams;

simInfo.frac_init = 1-1e-3;
simInfo.frac_final = 1e-3;

%% %%%%%%%%%%%%%%%%%%%%%% Check for optional inputs %%%%%%%%%%%%%%%%%%%%%%%
for i = 1:numel(varargin)
   if ischar(varargin{i}) && i <  numel(varargin)
       eval(['simInfo.' varargin{i} ' = varargin{i+1};'])
   end
end

if strcmp(simInfo.simType,'in_only_off')
    % Note that, in this scenario, we need to back-calculate the "true" 2
    % state parameters
    R2 = systemParams.R2;
    kon_true = R2(2,1)*(K_in + K_out)/K_in;
    R2(2,1) = kon_true;
    R2(1,1) = -kon_true;
    systemParams.R2 = R2;
end

% Add third, silent state
simInfo.RateMatrix(2:3,2:3) = systemParams.R2;
simInfo.RateMatrix( = [0 ; K_in];
vert_piece = [0 K_out 0];
simInfo.RateMatrix = vertcat(vert_piece, simInfo.RateMatrix);
diag_flags = eye(size(simInfo.RateMatrix,1))==1;
simInfo.RateMatrix(diag_flags) = 0;
simInfo.RateMatrix(diag_flags) = -sum(simInfo.RateMatrix);


simInfo.r_emission = [0 0 1]*1e4; % loading rate for each state
simInfo.pi0 = [0 0.5 0.5];
simInfo.noise = 1e4; 

% dictate which rate is tf-dependent (assume only one possible for now)
simInfo.tf_dependent_flags = false(size(simInfo.RateMatrix));
if strcmp(simInfo.simType,'out_only_off')      
    simInfo.tf_dependent_flags(1,2) = true;
elseif strcmp(simInfo.simType,'in_only_off')      
    simInfo.tf_dependent_flags(2,1) = true;
end

% simulate TF profiles
simInfo.tf_profile_array = simulate_tf_profiles(simInfo.frac_init,simInfo.frac_final,simInfo);

%% call simulation function
simInfo.gillespie = synthetic_rate_gillespie_io_v2(simInfo);


