% script to compile results from cpHMM inference
clear
close all
addpath(genpath('utilities'))

% projectNameCell = {'EveGtSL','EveGtSL-S1Null','EveWt','EveS1Null'};%};
doseNameCell = {'20220701_Oct4_dose_dose_response_low_0-200a','20220701_Oct4_dose_dose_response_mid_200-400a',...
                '20220701_Oct4_dose_dose_response_high_400-1200a'};
low_order_flag = 0;
iter = 1;
% resultsRoot = 'S:\Nick\Dropbox\InductionLogic\';
dose_struct = struct;
for p = 1:length(doseNameCell)
    
    % set project to analyze 
    projectName = doseNameCell{p};

    % get path to results
    try
        liveProject = LiveEnrichmentProject(projectName);
        resultsDir = [liveProject.dataPath 'cpHMM_results' filesep];
    catch
%         resultsRoot = 'S:/Nick/Dropbox/ProcessedEnrichmentData/';
        if isdir('C:\Users\nlamm\Dropbox (Personal)\')
            resultsRoot = 'C:\Users\nlamm\Dropbox (Personal)\ProcessedEnrichmentData';
        else
           resultsRoot = 'S:\Nick\Dropbox (Personal)\ProcessedEnrichmentData';
        end
        resultsDir = [resultsRoot filesep doseNameCell{p} filesep 'cpHMM_results' filesep];
    end
    
    % get list of all inference subdirectories. By default, we'll generate
    % summaries for all non-empty inference sub-directory
    infDirList = dir([resultsDir 'w*']);

    % iterate through the directories and compile the results
    for inf = 1:length(infDirList)
        load([infDirList(inf).folder filesep 'compiledResults_' infDirList(inf).name '.mat'],'compiledResults');
        fnames = fieldnames(compiledResults);
        for f = 1:length(fnames)
            dose_struct(iter).(fnames{f}) = compiledResults.(fnames{f});
        end
        iter = iter + 1;
    end
end

% Now load opto results

% projectNameCell = {'EveGtSL','EveGtSL-S1Null','EveWt','EveS1Null'};%};
optoNameCell = {'20220701_Oct4_opto_opto_contro','20220701_Oct4_opto_opto_LEXY-YA'};

iter = 1;
% resultsRoot = 'S:\Nick\Dropbox\InductionLogic\';
opto_struct = struct;
for p = 1:length(optoNameCell)
    
    % set project to analyze 
    projectName = optoNameCell{p};

    % get path to results
    try
        liveProject = LiveEnrichmentProject(projectName);
        resultsDir = [liveProject.dataPath 'cpHMM_results' filesep];
    catch
%         resultsRoot = 'S:/Nick/Dropbox/ProcessedEnrichmentData/';
        if isdir('C:\Users\nlamm\Dropbox (Personal)\')
            resultsRoot = 'C:\Users\nlamm\Dropbox (Personal)\ProcessedEnrichmentData';
        else
           resultsRoot = 'S:\Nick\Dropbox (Personal)\ProcessedEnrichmentData';
        end
        resultsDir = [resultsRoot filesep optoNameCell{p} filesep 'cpHMM_results' filesep];
    end
    
    % get list of all inference subdirectories. By default, we'll generate
    % summaries for all non-empty inference sub-directory
    infDirList = dir([resultsDir 'w*']);

    % iterate through the directories and compile the results
    for inf = 1:length(infDirList)
        load([infDirList(inf).folder filesep 'compiledResults_' infDirList(inf).name '.mat'],'compiledResults');
        fnames = fieldnames(compiledResults);
        for f = 1:length(fnames)
            opto_struct(iter).(fnames{f}) = compiledResults.(fnames{f});
        end
        iter = iter + 1;
    end
end

%% Make figures
dose_fig_path = [resultsRoot 'dose_figs' filesep];
mkdir(dose_fig_path);

cmap = brewermap(10,'Blues');
close all

kon_vec_mean = [dose_struct.freq_vec_mean];
kon_vec_ste = [dose_struct.freq_vec_ste];

dur_vec_mean = [dose_struct.dur_vec_mean];
dur_vec_ste = [dose_struct.dur_vec_ste];

r_vec_mean = [dose_struct.init_vec_mean];
r_vec_ste = [dose_struct.init_vec_ste];

dose_fig = figure('Position',[100 100 512 256]);
tiledlayout(1,3)
nexttile
hold on
bar(1,kon_vec_mean(1),'FaceColor',cmap(2,:))
bar(2,kon_vec_mean(2),'FaceColor',cmap(5,:))
bar(3,kon_vec_mean(3),'FaceColor',cmap(8,:))
errorbar(1:3,kon_vec_mean,kon_vec_ste,'.','Color','k','LineWidth',1.25)
% ylim([0 1.5*max(kon_vec_mean)])
ylabel('burst frequency (min^{-1})')
set(gca,'xtick',[])
set(gca,'Fontsize',12)
box on

nexttile
hold on
bar(1,dur_vec_mean(1),'FaceColor',cmap(2,:))
bar(2,dur_vec_mean(2),'FaceColor',cmap(5,:))
bar(3,dur_vec_mean(3),'FaceColor',cmap(8,:))
errorbar(1:3,dur_vec_mean,dur_vec_ste,'.','Color','k','LineWidth',1.25)
%ylim([0 2.6*dur_avg_low])
% ylim([0 1.5*max(dur_vec_mean)])
ylabel('burst duration (min)')
set(gca,'xtick',[])
set(gca,'Fontsize',12)
box on

nexttile
hold on
bar(1,r_vec_mean(1),'FaceColor',cmap(2,:))
bar(2,r_vec_mean(2),'FaceColor',cmap(5,:))
bar(3,r_vec_mean(3),'FaceColor',cmap(8,:))
ylabel('initiation rate (au/min)')
errorbar(1:3,r_vec_mean,r_vec_ste,'.','Color','k','LineWidth',1.25)
% ylim([0 1.5*max(r_vec_mean)])
set(gca,'xtick',[])
set(gca,'Fontsize',12)
box on

saveas(dose_fig,[dose_fig_path 'burst_bar_plot.pdf'])
saveas(dose_fig,[dose_fig_path 'burst_bar_plot.png'])

%% opto
cmap2 = brewermap(12,'Greens');
cmap3 = brewermap(12,'Greys');

opto_fig_path = [resultsRoot 'opto_figs' filesep];
mkdir(opto_fig_path);

cmap = brewermap(10,'Blues');
% close all


opto_fig = figure('Position',[100 100 768 256]);
tiledlayout(1,3)
nexttile
hold on
bar(1,opto_struct(1).freq_vec_mean(1),'FaceColor',cmap2(2,:))
bar(2,opto_struct(2).freq_vec_mean(1),'FaceColor',cmap3(3,:))

bar(4,opto_struct(1).freq_vec_mean(2),'FaceColor',cmap2(5,:))
bar(5,opto_struct(2).freq_vec_mean(2),'FaceColor',cmap3(5,:))

bar(7,opto_struct(1).freq_vec_mean(3),'FaceColor',cmap2(8,:))
bar(8,opto_struct(2).freq_vec_mean(3),'FaceColor',cmap3(8,:))

errorbar([1 4 7],opto_struct(1).freq_vec_mean,opto_struct(1).freq_vec_ste,'.','Color','k','LineWidth',1.25)
errorbar([2 5 8],opto_struct(2).freq_vec_mean,opto_struct(2).freq_vec_ste,'.','Color','k','LineWidth',1.25)
% ylim([0 1.5*max(kon_vec_mean)])
ylabel('burst frequency (min^{-1})')
set(gca,'xtick',[])
set(gca,'Fontsize',12)
box on

nexttile
hold on
bar(1,opto_struct(1).dur_vec_mean(1),'FaceColor',cmap2(2,:))
bar(2,opto_struct(2).dur_vec_mean(1),'FaceColor',cmap3(3,:))

bar(4,opto_struct(1).dur_vec_mean(2),'FaceColor',cmap2(5,:))
bar(5,opto_struct(2).dur_vec_mean(2),'FaceColor',cmap3(5,:))

bar(7,opto_struct(1).dur_vec_mean(3),'FaceColor',cmap2(8,:))
bar(8,opto_struct(2).dur_vec_mean(3),'FaceColor',cmap3(8,:))

errorbar([1 4 7],opto_struct(1).dur_vec_mean,opto_struct(1).dur_vec_ste,'.','Color','k','LineWidth',1.25)
errorbar([2 5 8],opto_struct(2).dur_vec_mean,opto_struct(2).dur_vec_ste,'.','Color','k','LineWidth',1.25)
%ylim([0 2.6*dur_avg_low])
% ylim([0 1.5*max(dur_vec_mean)])
ylabel('burst duration (min)')
set(gca,'xtick',[])
set(gca,'Fontsize',12)
box on

nexttile
hold on
bar(1,opto_struct(1).init_vec_mean(1),'FaceColor',cmap2(2,:))
bar(2,opto_struct(2).init_vec_mean(1),'FaceColor',cmap3(3,:))

bar(4,opto_struct(1).init_vec_mean(2),'FaceColor',cmap2(5,:))
bar(5,opto_struct(2).init_vec_mean(2),'FaceColor',cmap3(5,:))

bar(7,opto_struct(1).init_vec_mean(3),'FaceColor',cmap2(8,:))
bar(8,opto_struct(2).init_vec_mean(3),'FaceColor',cmap3(8,:))

errorbar([1 4 7],opto_struct(1).init_vec_mean,opto_struct(1).init_vec_ste,'.','Color','k','LineWidth',1.25)
errorbar([2 5 8],opto_struct(2).init_vec_mean,opto_struct(2).init_vec_ste,'.','Color','k','LineWidth',1.25)
ylabel('initiation rate (au/min)')
% errorbar(1:3,r_vec_mean,r_vec_ste,'.','Color','k','LineWidth',1.25)
ylim([0 2e4])
set(gca,'xtick',[])
set(gca,'Fontsize',12)
box on

saveas(opto_fig,[opto_fig_path 'opto_burst_bar_plot.pdf'])
saveas(opto_fig,[opto_fig_path 'opto_burst_bar_plot.png'])

%%  generate summary datasets

opto_summary_array = cat(2,double(opto_struct(1).timeGroupVec'),...
                      opto_struct(1).freq_vec_mean', opto_struct(1).freq_vec_ste', opto_struct(2).freq_vec_mean',opto_struct(2).freq_vec_ste',....
                      opto_struct(1).dur_vec_mean', opto_struct(1).dur_vec_ste', opto_struct(2).dur_vec_mean', opto_struct(2).dur_vec_ste',...
                      opto_struct(1).init_vec_mean', opto_struct(1).init_vec_ste', opto_struct(2).init_vec_mean', opto_struct(2).init_vec_ste');
                    
opt_table = array2table(opto_summary_array,'VariableNames',{'time_group','freq_mean_opto' ,'freq_ste_opto','freq_mean_ctrl' ,'freq_ste_ctrl',...
                                                                         'dur_mean_opto' ,'dur_ste_opto','dur_mean_ctrl' ,'dur_ste_ctrl',...
                                                                         'init_mean_opto' ,'init_ste_opto','init_mean_ctrl' ,'init_ste_ctrl'});
                                                                       
writetable(opto_table,[opto_fig_path 'opto_summary_table.csv'                                                                      


