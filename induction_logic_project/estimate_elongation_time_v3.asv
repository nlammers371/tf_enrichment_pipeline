clear
close all

% set basic paths
DataRoot = 'C:\Users\nlamm\Dropbox (Personal)\InductionLogic\';
if ~exist(DataRoot)
  DataRoot = 'S:\Nick\Dropbox\InductionLogic\';
end

project = '20210430';
DataPath = [DataRoot filesep 'raw_data' filesep project filesep];

% load WT data
load([DataPath 'spot_struct.mat'])
Tres = spot_struct(1).Tres;

% set parameters for autocorr analysis
window_size = 15;
n_boots = 100;

%% calculate autocorrelation
particle_id_vec = [spot_struct.particleID];
set_id_vec = [spot_struct.setID];
set_index = unique(set_id_vec);
gene_id_vec = [spot_struct.geneID];
gene_index = unique(gene_id_vec);
fluo_vec = [spot_struct.fluo];
non_nan_ids = find(~isnan(particle_id_vec));

% initialize array
% trace_array = NaN(length(spot_struct(1).fluoInterp),length(non_nan_ids));
iter = 1;
low_thresh = 1e3;
sm_kernel_size = .5;

high_thresh_vec = [];
% low_thresh_vec = [];
for s = 1:length(gene_index)
  fluo_vec = [spot_struct(gene_id_vec==gene_index(s)).fluo];
  high_thresh_vec(s) = prctile(fluo_vec,85);
%   low_thresh_vec(s) = prctile(fluo_vec,40);
end
low_thresh_vec = high_thresh_vec*.15;
%%
event_mat = NaN(1,2*window_size+1);
event_id_vec = NaN(1,1);
gene_id_vec2 = NaN(1,1);
genes_to_use = [];
id_vec = [];


for i = 1:length(spot_struct)
  
    trace = imgaussfilt(spot_struct(i).fluoInterp,sm_kernel_size);
    geneID = spot_struct(i).geneID;
    trace_len = length(trace);
    
    % identify low and high points
    low_filter = trace<=low_thresh_vec(geneID) & trace~=0;
    low_ids = find(low_filter);
    high_filter = trace>=high_thresh_vec(geneID);
    high_ids = find(high_filter);

    % iterate through trace to see if we can find any low->high or high->low
    % transitions
    id_vec = zeros(size(trace));
    id_vec(low_filter) = -1;
    id_vec(high_filter) = 1;

    event_ids = find(id_vec);

    for e = 1:length(event_ids)-1
        ind1 = event_ids(e);
        ind2 = event_ids(e+1);
        current_event = id_vec(ind1);
        next_event = id_vec(ind2);
        if ind2-ind1 <= window_size && current_event~=next_event 
            % extract snip          
            snip_full = NaN(1,2*window_size+1);
            indices = max([1,ind1-window_size]):min([trace_len,ind1+window_size]);
            snip_raw = trace(indices);
            snip_full(indices-ind1+window_size+1) = snip_raw;
            event_mat(end+1,:) = snip_full;
            event_id_vec(end+1) = next_event;
            gene_id_vec2(end+1) = geneID;
        end
    end
end

%% Perform simple fits to estimate ET
fit_struct = struct;
index_vec = 1:2*window_size+1;

for g = 1%:length(gene_index)
   % Identify changepoints
   mean_trend = nanmean(event_mat(event_id_vec==1&gene_id_vec2==gene_index(g),:));
   cpts = findchangepts(mean_trend,'Statistic','linear','MaxNumChanges',2);
   
   %%%%%%%%%%%%%%%%%%%%%
   % perform simultaneous fit of 3 linear trends broken at identified
   % changepoints
   
   % define vectors to fit
   x1 = index_vec(1:cpts(1));
   x2 = index_vec(cpts(1):cpts(2));
   x3 = index_vec(cpts(2):end);
   
   y1 = mean_vec(1:cpts(1));
   y2 = mean_vec(cpts(1):cpts(2));
   y3 = mean_vec(cpts(2):end);
   
   % define piece-wise functions
   f1_fun = @(params) (params(1) + params(2)*x1) - y1;
   f2_fun = @(params) (params(1) - x1(end)*(params(3)-params(2))+ params(3)*x2) - y2;
   f3_fun = @(params) ((params(1) - x1(end)*(params(3)-params(2))+ params(3)*x2) - x2(end)*(params(4)-params(3))+ params(4)*x3) - y3;
   
   % define master fit fun
   objective_fun = @(params) sqrt(sum(f1_fun.^2) + sum(f2_fun.^2) + sum(f3_fun.^2));
   
end   
   

